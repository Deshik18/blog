[
    {
        "title": "Games and Number Theory",
        "category": "Coding",
        "image": "downloads/gametheory.png",
        "description": "<a href='https://codeforces.com/contest/2004/problem/E'>Codeforces Education Round</a>",
        "details": "Details about Round Icons.",
        "date": "17 August 2024",
        "client": "Deshk",
        "problemStatement": "Two players, Alice and Bob, are playing a game. <br> They have n piles of stones, with the i-th pile initially containing ai stones. <br> On their turn, a player can choose any pile of stones and take any positive number of stones from it, with one condition: let the current number of stones in the pile be x. It is not allowed to take from the pile a number of stones y such that the greatest common divisor of x and y is not equal to 1. The player who cannot make a move loses. Both players play optimally (that is, if a player has a strategy that allows them to win, no matter how the opponent responds, they will win). Alice goes first.",
        "algorithm": "<strong><a href='https://cp-algorithms.com/game_theory/sprague-grundy-nim.html'>Sprague-Grundy Theorem</a></strong> <br><img src='downloads/spraguegrundy.png' style='max-width: 800px; width: 100%;'>.",
        "solution": "<p>The first (naive) solution to this problem would be to calculate the Grundy values for all integers from 1 to 10<sup>7</sup> via dynamic programming. That would work in O(A<sup>2</sup>logA) or O(A<sup>2</sup>), where A is the maximum value in the input, so it's not fast enough.</p><p>However, coding a naive solution to this problem might still help. There is a method that allows you to (sometimes) approach these kinds of problems where you can calculate Grundy values slowly, and you need to do it faster. This method usually consists of four steps:</p><ol><li>Code a solution that calculates Grundy values naively;</li><li>Run it and generate several first values of Grundy function;</li><li>Try to observe some patterns and formulate a faster way to calculate Grundy functions using them;</li><li>Verify your patterns on Grundy values of larger numbers and/or try to prove them.</li></ol><p>The third step is probably the most difficult, and generating too few Grundy values might lead you to wrong conclusions. For example, the first 8 values of Grundy are [1,0,2,0,3,0,4,0], which may lead to an assumption that g(x)=0 if x is even, or g(x)=x+1/2 if x is odd. However, this pattern breaks as soon as you calculate g(9), which is not 5, but 2. You can pause reading the editorial here and try formulating a different pattern that would explain that; the next paragraph contains the solution.</p><p>Okay, we claim that:</p><ul><li>g(1)=1;</li><li>g(x)=0 if x is even;</li><li>g(x)=p(x) if x is an odd prime number, where p(x) is the index of x in the sequence of prime numbers;</li><li>g(x)=g(d(x)) if x is an odd composite number, where d(x) is the minimum prime divisor of x.</li></ul><p>We can prove it with induction on x and something like that:</p><ul><li>g(1)=1 can simply be verified by calculation;</li><li>If x is even, there are no transitions to other even values of pile size from the current state of the game (because that would imply that both x and x−y are divisible by 2, so gcd(x,y) is at least 2). Since these are the only states having Grundy values equal to 0, the MEX of all transitions is equal to 0;</li><li>If x is an odd prime number, there are transitions to all states of the game from 1 to x−1. The set of Grundy values of these transitions contains all integers from 0 to g(x′), where x′ is the previous odd prime number; so, the MEX of this set is g(x′)+1=p(x′)+1=p(x);</li><li>If x is a composite prime number and d(x) is its minimum prime divisor, then there are transitions to all states from 1 to d(x)−1 (having Grundy values from 0 to g(d(x))−1); but every x′ such that g(x′)=g(d(x)) is divisible by d(x); so, there are no transitions to those states (otherwise gcd(x,y) would be at least d(x)). So, the MEX of all states reachable in one step is g(d(x)).</li></ul><p>This is almost the whole solution. However, we need to calculate p(x) and d(x) for every x until 10<sup>7</sup>. Probably the easiest way to do it is using the linear prime sieve.</p>"
    }
]
